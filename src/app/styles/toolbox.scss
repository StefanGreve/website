@use "breakpoints.scss" as bp;
@use "theme.scss";

@mixin blurry-background {
  &::before {
    content: '';
    backdrop-filter: blur(4px) !important;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 3;
    background: rgba(0, 0, 0, 0.1);
  }
}

@mixin overlay {
  @include blurry-background;
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
}

@mixin center-content($margin-lr: 0px) {
  width: -moz-available;
  width: -webkit-fill-available;

  @supports (width: stretch) {
    width: stretch;
  }

  margin-left: $margin-lr;
  margin-right: $margin-lr;

  @include bp.for-size(bp.$xs) {
    // offset mysterious surplus margin to the right
    margin-right: calc(1em + $margin-lr - 16px);
  }

  @include bp.for-size(bp.$sm) {
    margin-right: calc(2.5em + $margin-lr);
  }

  @include bp.for-size(bp.$md) {
    margin-right: calc(6em + $margin-lr);
  }

  @include bp.for-size(bp.$xl) {
    margin-right: calc(20% + $margin-lr);
  }
}

@mixin disabled {
  cursor: not-allowed;
  // TODO: find a way to apply opacity only to foreground and background colors
  opacity: 50%;
}

@mixin state-color {
  // default
  &[data-state="0"] {
    color: theme.$neutralColor;
  }

  // success
  &[data-state="1"] {
    color: theme.$successColor;
  }

  // info
  &[data-state="2"] {
    color: theme.$infoColor;
  }

  // warning
  &[data-state="3"] {
    color: theme.$warningColor;
  }

  // danger
  &[data-state="4"] {
    color: theme.$errorColor;
  }
}
